<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/util 
		  http://www.springframework.org/schema/util/spring-util-3.0.xsd
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 使用Spring加载读取properties配置文件参数.解析 properties后缀名文件.读取jdbc配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="classpath:spring/jdbc.properties" />
	<!-- 通过解析的jdbc.properties配置文件来创建数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}" p:defaultCatalog="" p:username="${jdbc.username}"
		p:password="${jdbc.password}" />

	<!-- 事务控制 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8">
		<property name="resolveLazily" value="true" />
		<property name="maxUploadSize" value="100000000" />
	</bean>
	<!-- 日志处理.拦截以Service结尾的请求 -->
	<bean id="throwsAdvice" class="com.neusoft.sframe.util.aspect.ThrowableManage" />
	<bean id="beanNameAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<value>throwsAdvice</value>
		</property>
	</bean>
	<aop:aspectj-autoproxy />

	<!-- 验证码组件配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">no</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<prop key="kaptcha.image.width">250</prop>
						<prop key="kaptcha.textproducer.font.size">120</prop>
						<prop key="kaptcha.image.height">160</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">宋体,宋体,宋体</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.neusoft.emanage.util.gen.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mybatis/*/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.neusoft" />
		<property name="annotationClass"
			value="com.neusoft.sframe.util.mybatis.MyBatisRepository" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:component-scan base-package="com.neusoft">
		<context:exclude-filter type="regex"
			expression="com.neusoft.emanage.*.web.*" />
	</context:component-scan>

	<!--要定时执行的方法 -->
<!-- 	<bean id="testTaskJob" -->
<!-- 		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> -->
<!-- 		<property name="targetObject"> -->
		<!-- 指定要定时执行的方法所在类，将定时任务定义成bean --> 
<!-- 			<ref bean="marketService" /> -->
<!-- 		</property> -->
<!-- 		<property name="targetMethod"> -->
			<!-- 指定定时执行的方法 -->
<!-- 			<value>getcurrentData</value> -->
<!-- 		</property> -->
<!-- 		<property name="concurrent"> -->
			<!-- 指定目标封装为有状态的任务，有状态的任务不能并发执行，无状态的任务可并发执行 -->
<!-- 			<value>false</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	<!-- 调度时间设置 -->
<!-- 	<bean id="testTaskJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"> -->
<!-- 		<property name="jobDetail"> -->
<!-- 			<ref bean="testTaskJob" /> -->
<!-- 		</property> -->
		<!-- 延时启动时间，单位ms -->
<!-- 		<property name="startDelay" value="0"></property> -->
		<!-- 重复间隔时间，单位ms -->
<!-- 		<property name="repeatInterval" value="60000"> -->
<!-- 		</property> -->
<!-- 	</bean> -->
		<!-- 配置触发器 -->
<!-- 	<bean id="testTaskJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
<!-- 		<property name="jobDetail"> -->
<!-- 			<ref bean="testTaskJob" /> -->
<!-- 		</property> -->
		<!-- 每天0点触发 -->
<!-- 		<property name="cronExpression"> -->
<!-- 			<value>5 * * * * ?</value> -->
<!-- 		</property> -->

<!-- 	</bean> -->

	<!--要定时执行的方法 -->
<!-- 	<bean id="testTaskJob1" -->
<!-- 		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> -->
<!-- 		<property name="targetObject"> -->
			<!-- 指定要定时执行的方法所在类，将定时任务定义成bean -->
<!-- 			<ref bean="issueUserCreateCoinServiceImpl" /> -->
<!-- 		</property> -->
<!-- 		<property name="targetMethod"> -->
			<!-- 指定定时执行的方法 -->
<!-- 			<value>everyDayJob</value> -->
<!-- 		</property> -->
<!-- 		<property name="concurrent"> -->
			<!-- 指定目标封装为有状态的任务，有状态的任务不能并发执行，无状态的任务可并发执行 -->
<!-- 			<value>false</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	<!-- 配置触发器 -->
<!-- 	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
<!-- 		<property name="jobDetail"> -->
<!-- 			<ref bean="testTaskJob1" /> -->
<!-- 		</property> -->
		<!-- 每天0点触发 -->
<!-- 		<property name="cronExpression"> -->
<!-- 			<value>0 00 00 ? * *</value> -->
<!-- 		</property> -->

<!-- 	</bean> -->
	<!--要定时执行的方法 -->
<!-- 	<bean id="testTaskJob2" -->
<!-- 		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> -->
<!-- 		<property name="targetObject"> -->
			<!-- 指定要定时执行的方法所在类，将定时任务定义成bean -->
<!-- 			<ref bean="issueUserCreateCoinServiceImpl" /> -->
<!-- 		</property> -->
<!-- 		<property name="targetMethod"> -->
			<!-- 指定定时执行的方法 -->
<!-- 			<value>upperControl</value> -->
<!-- 		</property> -->
<!-- 		<property name="concurrent"> -->
			<!-- 指定目标封装为有状态的任务，有状态的任务不能并发执行，无状态的任务可并发执行 -->
<!-- 			<value>false</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- 配置触发器 -->
<!-- 	<bean id="yearCoinage" class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
<!-- 		<property name="jobDetail" ref="testTaskJob2" /> -->
<!-- 		每年1月1日0点触发 -->
<!-- 		<property name="cronExpression" value="0 0 0 1 1 ? *"/> -->
<!-- 	</bean> -->

	<!--启动工作 -->
<!-- 	<bean lazy-init="false" -->
<!-- 		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> -->
<!-- 		<property name="triggers"> -->
<!-- 			<list> -->
<!-- 				这里添加多个定时任务触发器，对应第2步的bean id -->
<!-- 				<ref local="testTaskJobTrigger" /> -->
<!-- 				<ref local="cronTrigger" /> -->
<!-- 				<ref local="yearCoinage" /> -->
<!-- 			</list> -->

<!-- 		</property> -->
<!-- 	</bean> -->

</beans>
